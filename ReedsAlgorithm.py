import itertools, math

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç $\{ A ‚äÜ \{0, ‚Ä¶, m-1\} : |A| = t \}$
def subsets(m, t):
    '''
    >>> [bin(i) for i in subsets(3, 1)]
    ['0b1', '0b10', '0b100']
    >>> [bin(i) for i in subsets(3, 2)]
    ['0b11', '0b101', '0b110']
    >>> [bin(i) for i in subsets(3, 3)]
    ['0b111']
    '''
    for i in itertools.combinations(range(0, m), t):
        # $i$ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ç—ã, —Ä–æ–≤–Ω–æ $t$ —à—Ç—É–∫.
        yield sum(1 << j for j in i)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç $\{ A ‚äÜ \{0, ‚Ä¶, m-1\} : |A| ‚â§ r \}$
def all_subsets(m, r):
    '''
    >>> [bin(i) for i in all_subsets(3, 3)]
    ['0b1', '0b10', '0b100', '0b11', '0b101', '0b110', '0b111']
    '''
    return itertools.chain.from_iterable(
        subsets(m, t) for t in range(1, r+1)
    )

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ $V‚äÜùîΩ_2$,
# –µ—Å–ª–∏ –¥–∞–Ω—ã –±–∞–∑–∏—Å–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è $V$.
def _subspace(basis):
    for i in range(2**len(basis)):
        result = 0
        for mask in basis:
            if (i & 1) == 1:
                result |= mask
            i >>= 1
        yield result

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ $V_A ‚äÜ ùîΩ‚ÇÇ^m$
def subspaceV_A(_m, A):
    '''
    >>> [bin(i) for i in subspaceV_A(3, 0b10)]
    ['0b0', '0b10']
    >>> [bin(i) for i in subspaceV_A(3, 0b101)]
    ['0b0', '0b1', '0b100', '0b101']
    '''
    basis = []
    mask = 1
    while mask <= A:
        if (A & mask) != 0:
            basis.append(mask)
        mask <<= 1
    return _subspace(basis)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ $V_{\overbar{A}}$
def subspaceV_minusA(m, A):
    '''
    >>> [bin(i) for i in subspaceV_minusA(3, 0b10)]
    ['0b0', '0b1', '0b100', '0b101']
    >>> [bin(i) for i in subspaceV_minusA(3, 0b101)]
    ['0b0', '0b10']
    '''
    basis = []
    for i in range(m):
        mask = 1 << i
        if (A & mask) == 0:
            basis.append(mask)
    return _subspace(basis)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–º–µ–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤–∏–¥–∞ $(V_A + b)$
def cosets(m, A):
    for b in subspaceV_minusA(m, A):
        yield (v + b for v in subspaceV_A(m, A))

# –í—ã—á–∏—Å–ª—è–µ—Ç $\Eval\left(\sum_{A ‚àà \mathit{As}} u_A x_A\right)$
def evaluate(As, m, u):
    '''
    f(x‚ÇÄ,x‚ÇÅ,x‚ÇÇ) = x‚ÇÄx‚ÇÇ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π 00000101
    >>> bin(evaluate([0b101], 3, {0b101: 1}))
    '0b101'

    f(x‚ÇÄ,x‚ÇÅ) = 1 –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π 1111
    >>> bin(evaluate([0], 2, {0: 1}))
    '0b1111'
    '''
    result = 0
    for z in range(2**m):
        val = 0
        for A in As:
            # –í—ã—á–∏—Å–ª—è—é $x_A = x_{A_1}x_{A_2}‚Ä¶x_{A_k}$, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ $x_i = z_i$
            # –≠—Ç–æ —Ä–∞–≤–Ω–æ –µ–¥–∏–Ω–∏—Ü–µ —Ç–æ–≥–¥–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—Å–µ –±–∏—Ç—ã –∏–∑ $A$ —Ç–∞–∫–∂–µ —Å—Ç–æ—è—Ç –≤ $z$.
            xProduct = 1 if (z & A) == A else 0

            val += u[A] * xProduct
        val %= 2
        result = (result << 1) | val
    return result

# –ê–ª–≥–æ—Ä–∏—Ç–º –†–∏–¥–∞ –ø–æ –ø—Å–µ–≤–¥–æ–∫–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Ä–∞–Ω–µ–µ
def Reed(r, m, y):
    # $k = \sum_{i=0}^r C_m^r$. TODO: —Ö—Ä–∞–Ω–∏—Ç—å –≤ int, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–µ
    u = [None] * sum(math.comb(m,i) for i in range(r+1))
    t = r
    while t >= 0:
        for A in subsets(m, t):
            num1 = 0
            for coset in cosets(m, A):
                # s = $\sum_{z ‚àà \mathit{coset}} y_z$
                s = sum((y >> z) & 1 for z in coset)
                if (s % 2) == 1:
                    num1 += 1
            u[A] = int(num1 >= 2**(m - t - 1))
        y = y ^ evaluate(subsets(m, t), m, u)
        t = t - 1
    c = evaluate(all_subsets(m, r), m, u)
    return (c, u)

# ¬´–¢–µ—Å—Ç—ã¬ª:
import doctest; doctest.testmod()
# Try: `python -i ReedsAlgorithm.py`
